/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.ActorTransferable;
import hr.algebra.model.Director;
import hr.algebra.model.DirectorTransferable;
import hr.algebra.model.Film;
import hr.algebra.model.FilmTableModel;
import hr.algebra.model.Genre;
import hr.algebra.model.GenreTransferable;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Ivan
 */
public class User_Site extends javax.swing.JFrame {

    private static final Random RANDOM = new Random();
    private static final String DIR = "assets";
    private Repository repository;
    private FilmTableModel filmsTableModel;
    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;
    private Film selectedFilm;
    private DefaultListModel<Director> dirListModel = new DefaultListModel<>();
    private DefaultListModel<Director> selectedDirListModel = new DefaultListModel<>();
    private DefaultListModel<Actor> actorListModel = new DefaultListModel<>();
    private DefaultListModel<Actor> selectedActListModel = new DefaultListModel<>();
    private DefaultListModel<Genre> genreListModel = new DefaultListModel<>();
    private DefaultListModel<Genre> selectedGenListModel = new DefaultListModel<>();

    private List<Actor> actors = new ArrayList<>();
    private List<Actor> actorsInMovie = new ArrayList<>();
    private List<Director> directors = new ArrayList<>();
    private List<Genre> genres = new ArrayList<>();

    /**
     * Creates new form User_Site
     */
    public User_Site() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        lbIcon = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        spDuration = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlGenres = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jlSelectedGenres = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        jlActorsInMovies = new javax.swing.JList<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        jlSelectedDirectors = new javax.swing.JList<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tbFilms = new javax.swing.JTable();
        tfPicturePath = new javax.swing.JTextField();
        lbTitleError = new javax.swing.JLabel();
        lbDescriptionError = new javax.swing.JLabel();
        lbDurationError = new javax.swing.JLabel();
        lbGenresError = new javax.swing.JLabel();
        lbActorsError = new javax.swing.JLabel();
        lbPicturePathError = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        jlDirector = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jlActors = new javax.swing.JList<>();
        btnClear = new javax.swing.JButton();
        btnAddPerson = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Title :");

        jLabel3.setText("Description :");

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        taDescription.setWrapStyleWord(true);
        jScrollPane1.setViewportView(taDescription);

        jLabel4.setText("Duration :");

        spDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spDuration.setName(""); // NOI18N

        jLabel5.setText("Genres :");

        jScrollPane2.setViewportView(jlGenres);

        jScrollPane3.setViewportView(jlSelectedGenres);

        jScrollPane5.setViewportView(jlActorsInMovies);

        jScrollPane6.setViewportView(jlSelectedDirectors);

        jLabel6.setText("All persons :");

        jLabel7.setText("Actors :");

        jLabel8.setText("Directors :");

        tbFilms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbFilms.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbFilmsMouseClicked(evt);
            }
        });
        tbFilms.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbFilmsKeyReleased(evt);
            }
        });
        jScrollPane7.setViewportView(tbFilms);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 51, 51));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jScrollPane8.setViewportView(jlDirector);

        jScrollPane4.setViewportView(jlActors);

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnAddPerson.setText("Manage person");
        btnAddPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPersonActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfTitle, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(spDuration, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lbTitleError, javax.swing.GroupLayout.DEFAULT_SIZE, 12, Short.MAX_VALUE)
                                    .addComponent(lbDescriptionError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbGenresError, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(lbActorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(tfPicturePath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbPicturePathError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddPerson)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane8)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jScrollPane4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(spDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addGap(55, 55, 55)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbGenresError, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbActorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfPicturePath)
                            .addComponent(lbPicturePathError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnClear)
                    .addComponent(btnAddPerson)
                    .addComponent(btnRefresh))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (selectedFilm == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose movie to delete");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Delete movie",
                "Do you really want to delete movie?") == JOptionPane.YES_OPTION) {
            try {
                Files.deleteIfExists(Paths.get(selectedFilm.getPicturePath()));
                repository.deleteMovie(selectedFilm.getId());
                filmsTableModel.setMovie(repository.selectMovies());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(User_Site.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete movie!");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            if (selectedFilm == null) {
                MessageUtils.showInformationMessage("Wrong operation", "Please choose movie to update");
                return;
            }
            UpdateMovie um = new UpdateMovie(selectedFilm);
            um.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            um.setVisible(true);           
        } catch (Exception ex) {
            Logger.getLogger(User_Site.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed

        try {
            AddMovie am = new AddMovie();
            am.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            am.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(User_Site.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void tbFilmsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbFilmsKeyReleased
        showFilm();
    }//GEN-LAST:event_tbFilmsKeyReleased

    private void tbFilmsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbFilmsMouseClicked
        showFilm();
    }//GEN-LAST:event_tbFilmsMouseClicked

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearForm();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnAddPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPersonActionPerformed
        try {
            Add_Person ap = new Add_Person();
            ap.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            ap.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(User_Site.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddPersonActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        try {
            init();
        } catch (Exception ex) {
            Logger.getLogger(User_Site.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRefreshActionPerformed

    /**
     * @param args the command line arguments
     */
    private String uploadPicture() throws IOException {
        String picturePath = tfPicturePath.getText().trim();
        String ext = picturePath.substring(picturePath.lastIndexOf("."));
        String pictureName = Math.abs(RANDOM.nextInt()) + ext;
        String localPicturePath = DIR + File.separator + pictureName;
        FileUtils.copy(picturePath, localPicturePath);
        return localPicturePath;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(User_Site.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(User_Site.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(User_Site.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(User_Site.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new User_Site().setVisible(true);
            }
        });
    }

    public void showFilm() {
        clearForm();
        int selectedRow = tbFilms.getSelectedRow();
        int rowIndex = tbFilms.convertRowIndexToModel(selectedRow);
        int selectedFilmId = (int) filmsTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Film> optFilm = repository.selectMovie(selectedFilmId);
            if (optFilm.isPresent()) {
                selectedFilm = optFilm.get();
                fillForm(selectedFilm);
            }
        } catch (Exception ex) {
            Logger.getLogger(User_Site.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show movie!");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddPerson;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JList<Actor> jlActors;
    private javax.swing.JList<Actor> jlActorsInMovies;
    private javax.swing.JList<Director> jlDirector;
    private javax.swing.JList<Genre> jlGenres;
    private javax.swing.JList<Director> jlSelectedDirectors;
    private javax.swing.JList<Genre> jlSelectedGenres;
    private javax.swing.JLabel lbActorsError;
    private javax.swing.JLabel lbDescriptionError;
    private javax.swing.JLabel lbDurationError;
    private javax.swing.JLabel lbGenresError;
    private javax.swing.JLabel lbIcon;
    private javax.swing.JLabel lbPicturePathError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JSpinner spDuration;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbFilms;
    private javax.swing.JTextField tfPicturePath;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initValidation();
            initRepository();
            initTable();
            initPersons();
            initGenres();
            initDragNDrop();
        } catch (Exception ex) {
            Logger.getLogger(User_Site.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    private void initDragNDrop() {
        jlActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jlActors.setDragEnabled(true);
        jlActors.setTransferHandler(new ActorExportTransferHandler());

        jlActorsInMovies.setDropMode(DropMode.ON);
        jlActorsInMovies.setTransferHandler(new ActorImportTransferHandler());

        jlDirector.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jlDirector.setDragEnabled(true);
        jlDirector.setTransferHandler(new DirectorExportTransferHandler());

        jlSelectedDirectors.setDropMode(DropMode.ON);
        jlSelectedDirectors.setTransferHandler(new DirectorImportTransferHandler());

        jlGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jlGenres.setDragEnabled(true);
        jlGenres.setTransferHandler(new GenreExportTransferHandler());

        jlSelectedGenres.setDropMode(DropMode.ON);
        jlSelectedGenres.setTransferHandler(new GenreImportTransferHandler());
    }

    private class ActorExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new ActorTransferable(jlActors.getSelectedValue());
        }
    }

    private class ActorImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(ActorTransferable.ACTOR_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Actor add = (Actor) transferable.getTransferData(ActorTransferable.ACTOR_FLAVOR);
                if (actors.add(add)) {
                    if (MessageUtils.showConfirmDialog("Add actor", "Are you sure") == JOptionPane.YES_OPTION) {
                        repository.createNewActorMovie(selectedFilm, add);
                        initActorsInMovie(selectedFilm);
                        return true;
                    } else {
                        return false;
                    }

                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(User_Site.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(User_Site.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    private class DirectorExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new DirectorTransferable(jlDirector.getSelectedValue());
        }
    }

    private class DirectorImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(DirectorTransferable.DIRECTOR_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Director add = (Director) transferable.getTransferData(DirectorTransferable.DIRECTOR_FLAVOR);
                if (directors.add(add)) {
                    if (MessageUtils.showConfirmDialog("Add director", "Are you sure") == JOptionPane.YES_OPTION) {
                        repository.createNewActorMovie(selectedFilm, add);
                        initDirectorsInMovie(selectedFilm);
                        return true;
                    } else {
                        return false;
                    }
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(User_Site.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(User_Site.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    private class GenreExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new GenreTransferable(jlGenres.getSelectedValue());
        }
    }

    private class GenreImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(GenreTransferable.GENRE_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Genre add = (Genre) transferable.getTransferData(GenreTransferable.GENRE_FLAVOR);
                if (genres.add(add)) {
                    if (MessageUtils.showConfirmDialog("Add genre", "Are you sure") == JOptionPane.YES_OPTION) {
                        repository.createNewGenreMovie(selectedFilm, add);
                        initGenresInMovie(selectedFilm);
                        return true;
                    } else {
                        return false;
                    }
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(User_Site.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(User_Site.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    private void initValidation() {
        validationFields = Arrays.asList(tfTitle, taDescription, tfPicturePath);
        errorLabels = Arrays.asList(lbTitleError, lbDescriptionError, lbGenresError, lbPicturePathError, lbActorsError);
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void initTable() throws Exception {
        tbFilms.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbFilms.setAutoCreateRowSorter(true);
        tbFilms.setRowHeight(25);
        filmsTableModel = new FilmTableModel(repository.selectMovies());
        tbFilms.setModel(filmsTableModel);
    }

    private void fillForm(Film film) throws Exception {
        if (film.getPicturePath() != null && Files.exists(Paths.get(film.getPicturePath()))) {
            tfPicturePath.setText(film.getPicturePath());
            try {
                setIcon(lbIcon, new File(film.getPicturePath()));
            } catch (Exception e) {
                lbIcon.setIcon(new ImageIcon("C:/Users/Ivan/Desktop/Java_Projekt/assets/no_image.jpeg"));
            }
        } else {
            tfPicturePath.setText("");
            lbIcon.setIcon(new ImageIcon(getClass().getResource("/assets/no_image.jpg")));
        }
        tfTitle.setText(film.getTitle());
        String desc = film.getDescription();
        desc = desc.substring(desc.indexOf(">") + 1);
        String[] str = desc.split("<");
        if (str[0].isEmpty()) {
            taDescription.setText(desc);
        } else {
            taDescription.setText(str[0]);
        }
        spDuration.setValue(film.getRunTime());

        initDirectorsInMovie(film);

        initActorsInMovie(film);

        initGenresInMovie(film);

    }

    private void initGenresInMovie(Film film) throws Exception {
        List<Genre> genresInMovie = repository.selectGenreInMovie(film);
        selectedGenListModel.clear();
        genresInMovie.forEach(genre -> selectedGenListModel.addElement(genre));
        jlSelectedGenres.setModel(selectedGenListModel);
    }

    private void initActorsInMovie(Film film) throws Exception {
        actorsInMovie = repository.selectActorsInMovie(film);
        selectedActListModel.clear();
        actorsInMovie.forEach(actor -> selectedActListModel.addElement(actor));
        jlActorsInMovies.setModel(selectedActListModel);
    }

    private void initDirectorsInMovie(Film film) throws Exception {
        List<Director> directorsInMovie = repository.selectDirectorsInMovie(film);
        selectedDirListModel.clear();
        directorsInMovie.forEach(director -> selectedDirListModel.addElement(director));
        jlSelectedDirectors.setModel(selectedDirListModel);
    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file.getAbsolutePath(), label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(User_Site.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }

    private void clearForm() {
        validationFields.forEach(e -> e.setText(""));
        //errorLabels.forEach(e -> e.setText(""));

        //lbIcon.setIcon(new ImageIcon(getClass().getResource("/assets/no_image.png")));
        //selectedFilm = null;
    }

    private boolean formValid() {
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");

        }

        return ok;
    }

    private void initPersons() throws Exception {
        initDirector();
        initActor();

    }

    private void initActor() throws Exception {
        actors = repository.selectActors();
        actorListModel.clear();
        actors.forEach(actor -> actorListModel.addElement(actor));
        jlActors.setModel(actorListModel);
    }

    private void initDirector() throws Exception {
        List<Director> directors = repository.selectDirectors();
        dirListModel.clear();
        directors.forEach(director -> dirListModel.addElement(director));
        jlDirector.setModel(dirListModel);
    }

    private void initGenres() throws Exception {
        List<Genre> genres = repository.selectGenres();
        genreListModel.clear();
        genres.forEach(genre -> genreListModel.addElement(genre));
        jlGenres.setModel(genreListModel);

    }

}
